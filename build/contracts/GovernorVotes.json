{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "signatures",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "VoteCast",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BALLOT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COUNTING_MODE",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        }
      ],
      "name": "castVote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "castVoteBySig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "castVoteWithReason",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32",
          "name": "descriptionHash",
          "type": "bytes32"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32",
          "name": "descriptionHash",
          "type": "bytes32"
        }
      ],
      "name": "hashProposal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "proposalDeadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "proposalSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "propose",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "quorum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum IGovernor.ProposalState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract ERC20Votes",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "allSourcePaths": {
    "13": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol",
    "18": "@openzeppelin/contracts/utils/Context.sol",
    "2": "@openzeppelin/contracts/governance/Governor.sol",
    "20": "@openzeppelin/contracts/utils/Strings.sol",
    "22": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
    "23": "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol",
    "24": "@openzeppelin/contracts/utils/introspection/ERC165.sol",
    "25": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
    "26": "@openzeppelin/contracts/utils/math/Math.sol",
    "27": "@openzeppelin/contracts/utils/math/SafeCast.sol",
    "3": "@openzeppelin/contracts/governance/IGovernor.sol",
    "8": "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol"
  },
  "ast": {
    "absolutePath": "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol",
    "exportedSymbols": {
      "Address": [
        5905
      ],
      "Context": [
        5927
      ],
      "Counters": [
        6585
      ],
      "ECDSA": [
        4891
      ],
      "EIP712": [
        6295
      ],
      "ERC165": [
        6319
      ],
      "ERC20": [
        3686
      ],
      "ERC20Permit": [
        4501
      ],
      "ERC20Votes": [
        4332
      ],
      "Governor": [
        1857
      ],
      "GovernorVotes": [
        3039
      ],
      "IERC165": [
        7718
      ],
      "IERC20": [
        7442
      ],
      "IERC20Metadata": [
        7467
      ],
      "IERC20Permit": [
        7503
      ],
      "IGovernor": [
        5608
      ],
      "Math": [
        4979
      ],
      "SafeCast": [
        5372
      ],
      "Strings": [
        7706
      ],
      "Timers": [
        6141
      ]
    },
    "id": 3040,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3000,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "108:23:8"
      },
      {
        "absolutePath": "@openzeppelin/contracts/governance/Governor.sol",
        "file": "../Governor.sol",
        "id": 3001,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 3040,
        "sourceUnit": 1858,
        "src": "133:25:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol",
        "file": "../../token/ERC20/extensions/ERC20Votes.sol",
        "id": 3002,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 3040,
        "sourceUnit": 4333,
        "src": "159:53:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts/utils/math/Math.sol",
        "file": "../../utils/math/Math.sol",
        "id": 3003,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 3040,
        "sourceUnit": 4980,
        "src": "213:35:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": true,
        "baseContracts": [
          {
            "baseName": {
              "id": 3005,
              "name": "Governor",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1857,
              "src": "412:8:8"
            },
            "id": 3006,
            "nodeType": "InheritanceSpecifier",
            "src": "412:8:8"
          }
        ],
        "canonicalName": "GovernorVotes",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 3004,
          "nodeType": "StructuredDocumentation",
          "src": "250:126:8",
          "text": " @dev Extension of {Governor} for voting weight extraction from an {ERC20Votes} token.\n _Available since v4.3._"
        },
        "fullyImplemented": false,
        "id": 3039,
        "linearizedBaseContracts": [
          3039,
          1857,
          5608,
          6295,
          6319,
          7718,
          5927
        ],
        "name": "GovernorVotes",
        "nameLocation": "395:13:8",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "fc0c546a",
            "id": 3009,
            "mutability": "immutable",
            "name": "token",
            "nameLocation": "455:5:8",
            "nodeType": "VariableDeclaration",
            "scope": 3039,
            "src": "427:33:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_ERC20Votes_$4332",
              "typeString": "contract ERC20Votes"
            },
            "typeName": {
              "id": 3008,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 3007,
                "name": "ERC20Votes",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 4332,
                "src": "427:10:8"
              },
              "referencedDeclaration": 4332,
              "src": "427:10:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Votes_$4332",
                "typeString": "contract ERC20Votes"
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 3019,
              "nodeType": "Block",
              "src": "504:37:8",
              "statements": [
                {
                  "expression": {
                    "id": 3017,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 3015,
                      "name": "token",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3009,
                      "src": "514:5:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ERC20Votes_$4332",
                        "typeString": "contract ERC20Votes"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 3016,
                      "name": "tokenAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3012,
                      "src": "522:12:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ERC20Votes_$4332",
                        "typeString": "contract ERC20Votes"
                      }
                    },
                    "src": "514:20:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ERC20Votes_$4332",
                      "typeString": "contract ERC20Votes"
                    }
                  },
                  "id": 3018,
                  "nodeType": "ExpressionStatement",
                  "src": "514:20:8"
                }
              ]
            },
            "id": 3020,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3013,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3012,
                  "mutability": "mutable",
                  "name": "tokenAddress",
                  "nameLocation": "490:12:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 3020,
                  "src": "479:23:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC20Votes_$4332",
                    "typeString": "contract ERC20Votes"
                  },
                  "typeName": {
                    "id": 3011,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 3010,
                      "name": "ERC20Votes",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 4332,
                      "src": "479:10:8"
                    },
                    "referencedDeclaration": 4332,
                    "src": "479:10:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ERC20Votes_$4332",
                      "typeString": "contract ERC20Votes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "478:25:8"
            },
            "returnParameters": {
              "id": 3014,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "504:0:8"
            },
            "scope": 3039,
            "src": "467:74:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "baseFunctions": [
              5525
            ],
            "body": {
              "id": 3037,
              "nodeType": "Block",
              "src": "769:64:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 3033,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3023,
                        "src": "805:7:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 3034,
                        "name": "blockNumber",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3025,
                        "src": "814:11:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 3031,
                        "name": "token",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3009,
                        "src": "786:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ERC20Votes_$4332",
                          "typeString": "contract ERC20Votes"
                        }
                      },
                      "id": 3032,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "getPastVotes",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3841,
                      "src": "786:18:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (address,uint256) view external returns (uint256)"
                      }
                    },
                    "id": 3035,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "786:40:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 3030,
                  "id": 3036,
                  "nodeType": "Return",
                  "src": "779:47:8"
                }
              ]
            },
            "documentation": {
              "id": 3021,
              "nodeType": "StructuredDocumentation",
              "src": "547:114:8",
              "text": " Read the voting weight from the token's built in snapshot mechanism (see {IGovernor-getVotes})."
            },
            "functionSelector": "eb9019d4",
            "id": 3038,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getVotes",
            "nameLocation": "675:8:8",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 3027,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "742:8:8"
            },
            "parameters": {
              "id": 3026,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3023,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "692:7:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 3038,
                  "src": "684:15:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3022,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "684:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3025,
                  "mutability": "mutable",
                  "name": "blockNumber",
                  "nameLocation": "709:11:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 3038,
                  "src": "701:19:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3024,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "701:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "683:38:8"
            },
            "returnParameters": {
              "id": 3030,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3029,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 3038,
                  "src": "760:7:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3028,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "760:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "759:9:8"
            },
            "scope": 3039,
            "src": "666:167:8",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          }
        ],
        "scope": 3040,
        "src": "377:458:8",
        "usedErrors": []
      }
    ],
    "src": "108:728:8"
  },
  "bytecode": "",
  "bytecodeSha1": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.10+commit.fc410830"
  },
  "contractName": "GovernorVotes",
  "coverageMap": {
    "branches": {},
    "statements": {}
  },
  "dependencies": [
    "Context",
    "ECDSA",
    "EIP712",
    "ERC165",
    "ERC20Votes",
    "Governor",
    "IERC165",
    "IGovernor",
    "Math",
    "SafeCast",
    "Strings"
  ],
  "deployedBytecode": "",
  "deployedSourceMap": "",
  "language": "Solidity",
  "natspec": {
    "details": "Extension of {Governor} for voting weight extraction from an {ERC20Votes} token. _Available since v4.3._",
    "kind": "dev",
    "methods": {
      "COUNTING_MODE()": {
        "details": "A description of the possible `support` values for {castVote} and the way these votes are counted, meant to be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`. There are 2 standard keys: `support` and `quorum`. - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`. - `quorum=bravo` means that only For votes are counted towards quorum. - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum. NOTE: The string can be decoded by the standard https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`] JavaScript class.",
        "notice": "module:voting"
      },
      "castVote(uint256,uint8)": {
        "details": "See {IGovernor-castVote}."
      },
      "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": {
        "details": "See {IGovernor-castVoteBySig}."
      },
      "castVoteWithReason(uint256,uint8,string)": {
        "details": "See {IGovernor-castVoteWithReason}."
      },
      "execute(address[],uint256[],bytes[],bytes32)": {
        "details": "See {IGovernor-execute}."
      },
      "getVotes(address,uint256)": {
        "notice": "Read the voting weight from the token's built in snapshot mechanism (see {IGovernor-getVotes})."
      },
      "hasVoted(uint256,address)": {
        "details": "Returns weither `account` has cast a vote on `proposalId`.",
        "notice": "module:voting"
      },
      "hashProposal(address[],uint256[],bytes[],bytes32)": {
        "details": "See {IGovernor-hashProposal}. The proposal id is produced by hashing the RLC encoded `targets` array, the `values` array, the `calldatas` array and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in advance, before the proposal is submitted. Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the same proposal (with same operation and same description) will have the same id if submitted on multiple governors accross multiple networks. This also means that in order to execute the same operation twice (on the same governor) the proposer will have to change the description in order to avoid proposal id conflicts."
      },
      "name()": {
        "details": "See {IGovernor-name}."
      },
      "proposalDeadline(uint256)": {
        "details": "See {IGovernor-proposalDeadline}."
      },
      "proposalSnapshot(uint256)": {
        "details": "See {IGovernor-proposalSnapshot}."
      },
      "proposalThreshold()": {
        "details": "Part of the Governor Bravo's interface: _\"The number of votes required in order for a voter to become a proposer\"_."
      },
      "propose(address[],uint256[],bytes[],string)": {
        "details": "See {IGovernor-propose}."
      },
      "quorum(uint256)": {
        "details": "Minimum number of cast voted required for a proposal to be successful. Note: The `blockNumber` parameter corresponds to the snaphot used for counting vote. This allows to scale the quroum depending on values such as the totalSupply of a token at this block (see {ERC20Votes}).",
        "notice": "module:user-config"
      },
      "state(uint256)": {
        "details": "See {IGovernor-state}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "version()": {
        "details": "See {IGovernor-version}."
      },
      "votingDelay()": {
        "details": "Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to leave time for users to buy voting power, of delegate it, before the voting of a proposal starts.",
        "notice": "module:user-config"
      },
      "votingPeriod()": {
        "details": "Delay, in number of blocks, between the vote start and vote ends. NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting duration compared to the voting delay.",
        "notice": "module:user-config"
      }
    },
    "version": 1
  },
  "offset": [
    377,
    835
  ],
  "opcodes": "",
  "pcMap": {},
  "sha1": "c59cb8e6d5f4f3abf3ea0e2f6645d4e63aaaa59e",
  "source": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (governance/extensions/GovernorVotes.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Governor.sol\";\nimport \"../../token/ERC20/extensions/ERC20Votes.sol\";\nimport \"../../utils/math/Math.sol\";\n\n/**\n * @dev Extension of {Governor} for voting weight extraction from an {ERC20Votes} token.\n *\n * _Available since v4.3._\n */\nabstract contract GovernorVotes is Governor {\n    ERC20Votes public immutable token;\n\n    constructor(ERC20Votes tokenAddress) {\n        token = tokenAddress;\n    }\n\n    /**\n     * Read the voting weight from the token's built in snapshot mechanism (see {IGovernor-getVotes}).\n     */\n    function getVotes(address account, uint256 blockNumber) public view virtual override returns (uint256) {\n        return token.getPastVotes(account, blockNumber);\n    }\n}\n",
  "sourceMap": "",
  "sourcePath": "@openzeppelin/contracts/governance/extensions/GovernorVotes.sol",
  "type": "contract"
}